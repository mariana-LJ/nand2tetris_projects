// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:
    Mux16(a=instruction , b=ALUtoA, sel=instruction[15], out=MuxtoA);
    // Load instruction to A Register
    Not(in=instruction[15], out=ainstr);
    And(a=instruction[5], b=instruction[15], out=cinstrloadA);
    Or(a=cinstrloadA, b=ainstr, out=loadA);
    ARegister(in=MuxtoA, load=loadA, out=AtoMux, out[0..14]=addressM, out=AtoPC);
    // Load instruction to D Register
    And(a=instruction[15], b=instruction[4], out=loadD);
    DRegister(in=ALUtoD, load=loadD, out=DtoALU);
    Mux16(a=AtoMux, b=inM, sel=instruction[12], out=AMtoALU);
    // If reset == 0, evaluate current instruction
    /**
    * a = No jump
    * b = If out > 0 jump
    * c = If out = 0 jump
    * d = If out >= 0 jump
    * e = If out < 0 jump
    * f = If out != 0 jump
    * g = If out <= 0 jump
    * h = jump
    **/
    Not(in=negative, out=nonneg);
    Not(in=zero, out=nonzero);
    And(a=nonneg, b=nonzero, out=jgt);
    Or(a=nonneg, b=zero, out=jge);
    Or(a=negative, b=zero, out=jle);
    Mux8Way(a=false, b=jgt, c=zero, d=jge, e=negative, f=nonzero, g=jle, h=true, sel[0]=instruction[0], sel[1]=instruction[1], sel[2]=instruction[2], out=jump);
    // Only jump if the instruction is a c instruction
    And(a=jump, b=instruction[15], out=pcload);
    PC(in=AtoPC, load=pcload, inc=true, reset=reset, out[0..14]=pc);
    ALU(x=DtoALU, y=AMtoALU, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALUtoA, out=ALUtoD, out=outM, zr=zero, ng=negative);
    // Decide to write to memory
    And(a=instruction[15], b=instruction[3], out=writeM);
}
